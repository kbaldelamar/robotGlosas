# database/migration_en_pausa.py
"""
Script de migraci√≥n para a√±adir soporte completo al m√≥dulo EN PAUSA.
Ejecutar UNA VEZ antes de usar el m√≥dulo EN PAUSA.
"""

import sqlite3
import os
import logging
from config.settings import Settings

def migrar_bd_para_en_pausa():
    """
    Migra la base de datos para soportar funcionalidad EN PAUSA.
    A√±ade columna 'intentos' y estado 'FALLA_TOTAL'.
    """
    
    print("üîß === MIGRACI√ìN BD PARA M√ìDULO EN PAUSA ===")
    print("‚úÖ OBJETIVO: A√±adir soporte completo para reprocesamiento")
    print("="*60)
    
    try:
        # Conectar a la base de datos
        db_path = Settings.DATABASE_PATH
        print(f"üìÇ Conectando a: {db_path}")
        
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        
        print("‚úÖ Conexi√≥n exitosa")
        print("-"*40)
        
        # ===================================
        # PASO 1: Verificar estructura actual
        # ===================================
        print("üîç PASO 1: Verificando estructura actual")
        
        # Verificar si existe tabla principal
        cursor = conn.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='cuenta_glosas_principal'
        """)
        
        tabla_existe = cursor.fetchone()
        
        if not tabla_existe:
            print("‚ùå ERROR: Tabla 'cuenta_glosas_principal' no existe")
            print("   Ejecute primero el procesador principal para crear las tablas")
            return False
        
        print("‚úÖ Tabla 'cuenta_glosas_principal' existe")
        
        # Verificar columnas actuales
        cursor = conn.execute("PRAGMA table_info(cuenta_glosas_principal)")
        columnas_actuales = {row['name']: row for row in cursor.fetchall()}
        
        print(f"üìã Columnas actuales: {len(columnas_actuales)}")
        for nombre in columnas_actuales.keys():
            print(f"   ‚Ä¢ {nombre}")
        
        # ===================================
        # PASO 2: A√±adir columna 'intentos' si no existe
        # ===================================
        print("\nüîß PASO 2: Verificando columna 'intentos'")
        
        if 'intentos' not in columnas_actuales:
            print("‚ûï A√±adiendo columna 'intentos'...")
            
            conn.execute("""
                ALTER TABLE cuenta_glosas_principal 
                ADD COLUMN intentos INTEGER DEFAULT 0
            """)
            
            print("‚úÖ Columna 'intentos' a√±adida exitosamente")
        else:
            print("‚úÖ Columna 'intentos' ya existe")
        
        # ===================================
        # PASO 3: Verificar estados existentes
        # ===================================
        print("\nüìä PASO 3: Verificando estados existentes")
        
        cursor = conn.execute("""
            SELECT estado, COUNT(*) as count 
            FROM cuenta_glosas_principal 
            GROUP BY estado
        """)
        
        estados_actuales = cursor.fetchall()
        
        print("Estados encontrados:")
        for row in estados_actuales:
            print(f"   ‚Ä¢ {row['estado']}: {row['count']} registros")
        
        # ===================================
        # PASO 4: Actualizar modelo de estados (si es necesario)
        # ===================================
        print("\nüîÑ PASO 4: Verificando consistencia de estados")
        
        # Verificar si hay estados inconsistentes que necesiten limpieza
        cursor = conn.execute("""
            SELECT COUNT(*) as count 
            FROM cuenta_glosas_principal 
            WHERE estado NOT IN ('PENDIENTE', 'EN_PROCESO', 'COMPLETADO', 'FALLIDO', 'FALLA_TOTAL')
        """)
        
        inconsistentes = cursor.fetchone()['count']
        
        if inconsistentes > 0:
            print(f"‚ö†Ô∏è Encontrados {inconsistentes} registros con estados inconsistentes")
            print("üîß Normalizando estados...")
            
            # Normalizar estados conocidos comunes
            normalizaciones = [
                ("UPDATE cuenta_glosas_principal SET estado = 'COMPLETADO' WHERE estado = 'COMPLETE'", "COMPLETE -> COMPLETADO"),
                ("UPDATE cuenta_glosas_principal SET estado = 'FALLIDO' WHERE estado = 'FAILED'", "FAILED -> FALLIDO"),
                ("UPDATE cuenta_glosas_principal SET estado = 'PENDIENTE' WHERE estado = 'PENDING'", "PENDING -> PENDIENTE"),
            ]
            
            for sql, descripcion in normalizaciones:
                try:
                    cursor = conn.execute(sql)
                    if cursor.rowcount > 0:
                        print(f"   ‚úÖ {descripcion}: {cursor.rowcount} registros")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è {descripcion}: {e}")
        else:
            print("‚úÖ Todos los estados son consistentes")
        
        # ===================================
        # PASO 5: Inicializar intentos para registros existentes
        # ===================================
        print("\nüî¢ PASO 5: Inicializando intentos para registros existentes")
        
        cursor = conn.execute("""
            UPDATE cuenta_glosas_principal 
            SET intentos = 0 
            WHERE intentos IS NULL
        """)
        
        if cursor.rowcount > 0:
            print(f"‚úÖ Inicializados intentos para {cursor.rowcount} registros")
        else:
            print("‚úÖ Todos los registros ya tienen intentos inicializados")
        
        # ===================================
        # PASO 6: Crear √≠ndices optimizados para EN PAUSA
        # ===================================
        print("\nüîç PASO 6: Creando √≠ndices optimizados para EN PAUSA")
        
        indices_en_pausa = [
            ("CREATE INDEX IF NOT EXISTS idx_estado_intentos ON cuenta_glosas_principal(estado, intentos)", 
             "√çndice para filtrar por estado e intentos"),
            ("CREATE INDEX IF NOT EXISTS idx_intentos ON cuenta_glosas_principal(intentos)", 
             "√çndice para ordenar por intentos"),
            ("CREATE INDEX IF NOT EXISTS idx_fecha_intentos ON cuenta_glosas_principal(fecha_inicio, intentos)", 
             "√çndice para ordenar por fecha e intentos")
        ]
        
        for sql, descripcion in indices_en_pausa:
            try:
                conn.execute(sql)
                print(f"   ‚úÖ {descripcion}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è {descripcion}: {e}")
        
        # ===================================
        # PASO 7: Crear vista para EN PAUSA
        # ===================================
        print("\nüëÅÔ∏è PASO 7: Creando vista espec√≠fica para EN PAUSA")
        
        conn.execute("""
            CREATE VIEW IF NOT EXISTS vw_cuentas_en_pausa AS
            SELECT 
                idcuenta,
                proveedor,
                estado,
                intentos,
                glosas_encontradas,
                glosas_procesadas,
                fecha_inicio,
                motivo_fallo,
                CASE 
                    WHEN intentos >= 5 THEN 'NO_PROCESABLE'
                    WHEN estado IN ('FALLIDO', 'EN_PROCESO') AND intentos < 5 THEN 'PROCESABLE'
                    ELSE 'OTRO'
                END as procesabilidad
            FROM cuenta_glosas_principal 
            WHERE estado IN ('FALLIDO', 'EN_PROCESO', 'FALLA_TOTAL')
            ORDER BY intentos DESC, fecha_inicio DESC
        """)
        
        print("‚úÖ Vista 'vw_cuentas_en_pausa' creada")
        
        # ===================================
        # FINALIZAR MIGRACI√ìN
        # ===================================
        conn.commit()
        conn.close()
        
        print("\nüéâ === MIGRACI√ìN COMPLETADA EXITOSAMENTE ===")
        print("="*60)
        print("‚úÖ Columna 'intentos' verificada/a√±adida")
        print("‚úÖ Estados normalizados")
        print("‚úÖ √çndices optimizados creados")
        print("‚úÖ Vista EN PAUSA creada")
        print("‚úÖ Base de datos lista para m√≥dulo EN PAUSA")
        print("\nüí° Ahora puede usar el m√≥dulo EN PAUSA sin problemas")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR EN MIGRACI√ìN: {e}")
        return False

def verificar_configuracion_en_pausa():
    """Verifica que la configuraci√≥n EN PAUSA est√© correcta."""
    
    print("\nüîç === VERIFICACI√ìN DE CONFIGURACI√ìN EN PAUSA ===")
    print("-"*50)
    
    try:
        conn = sqlite3.connect(Settings.DATABASE_PATH)
        conn.row_factory = sqlite3.Row
        
        # Verificar estructura
        cursor = conn.execute("PRAGMA table_info(cuenta_glosas_principal)")
        columnas = [row['name'] for row in cursor.fetchall()]
        
        requisitos = ['intentos', 'estado', 'motivo_fallo', 'fecha_inicio']
        faltantes = [req for req in requisitos if req not in columnas]
        
        if faltantes:
            print(f"‚ùå FALTAN COLUMNAS: {faltantes}")
            return False
        
        print("‚úÖ Estructura de tabla correcta")
        
        # Verificar datos
        cursor = conn.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN estado IN ('FALLIDO', 'EN_PROCESO') AND intentos < 5 THEN 1 ELSE 0 END) as procesables,
                SUM(CASE WHEN estado = 'FALLA_TOTAL' OR intentos >= 5 THEN 1 ELSE 0 END) as no_procesables
            FROM cuenta_glosas_principal
        """)
        
        stats = cursor.fetchone()
        
        print(f"üìä ESTAD√çSTICAS ACTUALES:")
        print(f"   ‚Ä¢ Total registros: {stats['total']}")
        print(f"   ‚Ä¢ Procesables EN PAUSA: {stats['procesables']}")
        print(f"   ‚Ä¢ No procesables: {stats['no_procesables']}")
        
        # Verificar vista
        try:
            cursor = conn.execute("SELECT COUNT(*) FROM vw_cuentas_en_pausa")
            vista_count = cursor.fetchone()[0]
            print(f"   ‚Ä¢ Registros en vista EN PAUSA: {vista_count}")
            print("‚úÖ Vista EN PAUSA funcional")
        except Exception as e:
            print(f"‚ùå Error en vista EN PAUSA: {e}")
            return False
        
        conn.close()
        
        print("‚úÖ CONFIGURACI√ìN EN PAUSA VERIFICADA CORRECTAMENTE")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de migraci√≥n."""
    print("üöÄ CONFIGURADOR DE M√ìDULO EN PAUSA")
    print("="*50)
    
    # Migrar base de datos
    if migrar_bd_para_en_pausa():
        # Verificar configuraci√≥n
        verificar_configuracion_en_pausa()
        
        print("\nüéØ PR√ìXIMOS PASOS:")
        print("1. ‚úÖ Migraci√≥n completada")
        print("2. üîÑ Ejecutar m√≥dulo EN PAUSA desde la interfaz")
        print("3. üìä Verificar procesamiento de cuentas fallidas")
        print("\nüéâ ¬°Listo para usar el m√≥dulo EN PAUSA!")
    else:
        print("\n‚ùå MIGRACI√ìN FALLIDA")
        print("Revise los errores anteriores antes de continuar")

if __name__ == "__main__":
    # Configurar logging b√°sico
    logging.basicConfig(level=logging.INFO)
    main()